# inetnum status tests
# CASE 1: We try to create inetnum object
# with status LIR-PARTITIONED PA under ALLOCATED PA
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 1: The creation will succeed


# CASE 2: We try to create inetnum object
# with status LIR-PARTITIONED PI under LIR-PARTITIONED PA
#
# create inetnum object 
#
#FAILURE
#
# RESULT 2: The creation will fail with Authorisation failed


# CASE 3: We try to create inetnum object
# with status LIR-PARTITIONED PA under LIR-PARTITIONED PA
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 3: The creation will succeed


# CASE 4: We try to create inetnum object
# with status ASSIGNED PI under LIR-PARTITIONED PA
#
# create inetnum object 
#
#FAILURE
#
# RESULT 4: The creation will fail with Authorisation failed


# CASE 5: We try to create inetnum object
# with status ASSIGNED PA under LIR-PARTITIONED PA
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 5: The creation will succeed


# CASE 6: We try to create inetnum object
# with status ASSIGNED PA under ASSIGNED PA
#
# create inetnum object 
#
#FAILURE
#
# ***but will succeed at the moment until checks are tightened***
# RESULT 6: The creation will fail with Authorisation failed


# CASE 7: We try to update inetnum object
# changing status LIR-PARTITIONED PA to ASSIGNED PA status
# with more specific objects existing
#
# update inetnum object 
#
#FAILURE
#
# ***but will succeed at the moment until checks are tightened***
# RESULT 7: The update will fail with Authorisation failed


# CASE 8: We try to create inetnum object
# with status LIR-PARTITIONED PA under ASSIGNED PA status
#
# create inetnum object 
#
#FAILURE
#
# RESULT 8: The creation will fail with Authorisation failed


# CASE 9: We try to update inetnum object
# changing status ASSIGNED PA to LIR-PARTITIONED PA
#
# update inetnum object 
#
#SUCCESS
#
# RESULT 9: The update will succeed


# CASE 10: We try to create inetnum object
# with status ASSIGNED PA under ALLOCATED PA
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 10: The creation will succeed


# CASE 11: We try to delete inetnum object
# with status LIR-PARTITIONED PA from a hierarchy
#
# delete inetnum object 
#
#SUCCESS
#
# RESULT 11: The deletion will succeed


# CASE 12: We try to create inetnum object
# with status LIR-PARTITIONED PA under ALLOCATED UNSPECIFIED
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 12: The creation will succeed


# CASE 13: We try to create inetnum object
# with status ALLOCATED UNSPECIFIED under ALLOCATED UNSPECIFIED
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 13: The creation will succeed


# CASE 14: We try to update inetnum object
# with status ALLOCATED UNSPECIFIED 
# and change the mnt-by to something not in the allocmnt list
#
# update inetnum object 
#
#SUCCESS
#
# RESULT 14: The update will succeed


# CASE 15: We try to create inetnum object
# with status SUB-ALLOCATED PA 
# parent object has status ALLOCATED PA
%
% requires initial objects to be loaded
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 15: The creation will succeed


# CASE 16: We try to create inetnum object
# with status SUB-ALLOCATED PA 
# parent object has status ALLOCATED UNSPECIFIED
%
% requires initial objects to be loaded
#
# create inetnum object 
#
#FAILURE
#
# RESULT 16: The creation will fail


# CASE 17: We try to create inetnum object
# with status SUB-ALLOCATED PA 
# parent object has status ALLOCATED PI
%
% requires initial objects to be loaded
#
# create inetnum object 
#
#FAILURE
#
# RESULT 17: The creation will fail


# CASE 18: We try to create inetnum object
# with status SUB-ALLOCATED PA 
# parent object has status EARLY-REGISTRATION
%
% requires initial objects to be loaded
#
# create inetnum object 
#
#FAILURE
#
# RESULT 18: The creation will fail


# CASE 19: We try to create inetnum object
# with status SUB-ALLOCATED PA 
# parent object has status ASSIGNED PA
%
% requires initial objects to be loaded
#
# create inetnum object 
#
#FAILURE
#
# RESULT 19: The creation will fail


# CASE 20: We try to create inetnum object
# with status LIR-PARTITIONED PA 
# parent object has status SUB-ALLOCATED PA
%
% requires initial objects to be loaded
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 20: The creation will succeed


# CASE 21: We try to create inetnum object
# with status ASSIGNED PA 
# parent object has status SUB-ALLOCATED PA
%
% requires initial objects to be loaded
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 21: The creation will succeed


# CASE 22: We try to create inetnum object
# with status ASSIGNED PI 
# parent object has status SUB-ALLOCATED PA
#
# create inetnum object 
#
#FAILURE
#
# RESULT 22: The creation will fail


# CASE 23: We try to create inetnum object
# with status SUB-ALLOCATED PA
# parent object has status LIR-PARTITIONED PA
%
% requires initial objects to be loaded
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 23: The creation will succeed


# CASE 24: We try to create inetnum object
# with status SUB-ALLOCATED PA
# parent object has status ALLOCATED UNSPECIFIED
# using override
%
% requires initial objects to be loaded
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 24: The creation will succeed


# CASE 25: We try to create inetnum object
# with status NOT-SET
# parent object is ALLOCATED UNSPECIFIED
%
% requires initial objects to be loaded
#
# create inetnum object 
#
#FAILURE
#
# RESULT 25: The creation will fail


# CASE 26: We try to create inetnum object
# with status NOT-SET
# parent object is ALLOCATED UNSPECIFIED
# with override
%
% requires initial objects to be loaded
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 26: The creation will succeed


# CASE 27: We try to modify inetnum object
# from status ASSIGNED PI to NOT-SET
# parent object is ALLOCATED UNSPECIFIED
#
%
% requires initial objects to be loaded
#
# modify inetnum object 
#
#FAILURE
#
# RESULT 27: The modification will fail


# CASE 28: We try to update inetnum object
# from status ASSIGNED PI to NOT-SET
# parent object is ALLOCATED UNSPECIFIED
# with override
#
%
% requires initial objects to be loaded
#
# modify inetnum object 
#
#SUCCESS
#
# RESULT 28: The modification will succeed


# CASE 29: We try to update inetnum object
# from status NOT-SET to ASSIGNED PI
# parent object is ALLOCATED UNSPECIFIED
#
%
% requires initial objects to be loaded
#
# modify inetnum object 
#
#SUCCESS
#
# RESULT 29: The modification will succeed


# CASE 30: We try to update inetnum object
# from status NOT-SET to SUB-ALLOCATED PA
# parent object is ALLOCATED UNSPECIFIED
#
%
% requires initial objects to be loaded
#
# modify inetnum object 
#
#FAILURE
#
# RESULT 30: The modification will fail


# CASE 31: We try to create inetnum object
#          with status ALLOCATED PA under ALLOCATED PA
#          with hostmaster mntner
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 31: The creation will succeed


# CASE 32: We try to create inetnum object
#          with status ALLOCATED PA under ALLOCATED PA
#          with hostmaster mntner
#          no org: reference
#
# create inetnum object 
#
#FAILURE
#
# RESULT 32: The creation will fail


######################################################
# AfriNic tests

# CASE 33: We try to create inetnum object
#          with status ALLOCATED PI under ALLOCATED PA
#          with hostmaster mntner
#
# create inetnum object 
#
#FAILURE
#
# RESULT 33: The creation will fail
#rir AFRINIC


# CASE 34: We try to create inetnum object
#          with status SUB-ALLOCATED PA under ALLOCATED PA
#          no org: reference
#
# create inetnum object 
#
#FAILURE
#
# RESULT 34: The creation will fail
#rir AFRINIC


# CASE 35: We try to create inetnum object
#          with status SUB-ALLOCATED PA under SUB-ALLOCATED PA
#
# create inetnum object 
#
#FAILURE
#
# RESULT 35: The creation will fail
#rir AFRINIC


# CASE 36: We try to create inetnum object
#          with status ASSIGNED PI under ASSIGNED PA
#
# create inetnum object 
#
#FAILURE
#
# RESULT 36: The creation will fail
#rir AFRINIC

# end of AfriNic tests
######################################################


# CASE 37: We try to create inetnum object
# with status ALLOCATED UNSPECIFIED under ALLOCATED UNSPECIFIED
# without the hostmaster mntner
#
# create inetnum object 
#
#FAILURE
#
# RESULT 37: The creation will fail


# CASE 38: We try to create inetnum object
# with status ASSIGNED ANYCAST under ALLOCATED UNSPECIFIED
# without the hostmaster mntner
#
# create inetnum object 
#
#FAILURE
#
# RESULT 38: The creation will fail


# CASE 39: We try to create inetnum object
# with status ASSIGNED ANYCAST under ALLOCATED UNSPECIFIED
# with the hostmaster mntner
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 39: The creation will succeed


# CASE 40: We try to modify inetnum object
# with status ASSIGNED ANYCAST and change to ASSIGNED PA
#
# create inetnum object 
#
#FAILURE
#
# RESULT 40: The modify will fail


# CASE 41: We try to modify inetnum object
# with status ASSIGNED-PA and change to ASSIGNED ANYCAST
#
# create inetnum object 
#
#FAILURE
#
# RESULT 41: The modify will fail


# CASE 42: We try to modify inetnum object
# with status ASSIGNED ANYCAST 
# and change some other attribute
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 42: The modify will succeed


# CASE 43: We try to delete inetnum object
# with status ASSIGNED ANYCAST 
#
# delete inetnum object 
#
#SUCCESS
#
# RESULT 43: The deletion will succeed


# CASE 44: We try to create inetnum object
# with status ASSIGNED ANYCAST under ALLOCATED PA
# with the hostmaster mntner
#
# create inetnum object 
#
#FAILURE
#
# RESULT 44: The creation will fail


# CASE 45: We try to create inetnum object
# with status ASSIGNED ANYCAST under ALLOCATED PI
# with the hostmaster mntner
#
# create inetnum object 
#
#SUCCESS
#
# RESULT 45: The creation will succeed


# CASE 46: We try to create ASSIGNED PA inetnum object
# under ASSIGNED ANYCAST
#
# create inetnum object 
#
#FAILURE
#
# RESULT 46: The creation will fail


