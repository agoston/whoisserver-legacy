************************************************************

This whole set of tests is a lottery as currently written

************************************************************

They use real netblocks and interact with real dns servers.
This gives variable results on multiple test runs.

The whole set needs re-writing with a test dns server
under the control of the test suite.

************************************************************




# CASE 1: Delete fails because of wrong password
#
# delete domain object
#
#FAILURE
#
# RESULT 1: deletions will fail


# CASE 2: Delete succeeds with correct password
#
# delete domain object
#
#SUCCESS
#
# RESULT 2: deletion will pass


# CASE 3: Delete succeeds with correct override password
#
# delete domain object
#
#SUCCESS
#
# RESULT 3: deletion will pass


# CASE 4: Delete fails with incorrect override password
#
# delete domain object
#
#FAILURE
#
# RESULT 4: deletion will fail


# CASE 5: Delete passes with correct auth from 0/0 mnt-domains
#
# delete domain object
#
#SUCCESS
#
# RESULT 5: deletion will pass


# CASE 6: Modification passes with correct auth from existing object
#
# modify domain object
#
#SUCCESS
#
# RESULT 6: modification will pass

# CASE 7: Modification passes with correct auth from new object
#
# modify domain object
#
#SUCCESS
#
# RESULT 7: modification will pass

# CASE 8: Modification fails because it's not the related RIR
#
# modify domain object
#
#FAILURE
#
# RESULT 8: modification will fail

# CASE 9: Modification succeeds even though less specific object exists
#
# modify domain object
#
#FAILURE
#
# RESULT 9: modification will fail


# CASE 10: Modification fails due to excess delcheck errors
#
# modify domain object
#
#FAILURE
#
# RESULT 10: modification will fail


# CASE 11: Creation passes with correct auth from mnt-domains
# in parent inetnum 0/0
#
# create domain object
#
#SUCCESS
#
# RESULT 11: creation will pass


# CASE 12: Creation fails with parent domain existing
#
# create domain object
#
#FAILURE
#
# RESULT 12: creation will fail


# CASE 13: Creation fails with no pass around
#
# create domain object
#
#FAILURE
#
# RESULT 13: creation will fail


# CASE 14: Creation of delegation less than a /24 passes with override
#
# create domain object
#
#SUCCESS
#
# RESULT 14: creation will pass


# CASE 15: Creation fails because it's not the related RIR
#
# create domain object
#
#FAILURE
#
# RESULT 15: Creation will fail

# CASE 16 removed


# CASE 17: Creation fails due to excess delcheck errors
#
# create domain object
#
#FAILURE
#
# RESULT 17: create will fail


# CASE 18: Creation passes with correct delchecker output
# parent object under 0::/0
#
# create domain object
# WARNING WARNING WARNING
# this test may fail anytime, due to external references
# TODO replace it with something less puny
# WARNING WARNING WARNING
#
#SUCCESS
#
# RESULT 18: create will pass


# CASE 19: Modification passes with correct delchecker output
#
# modify domain object
# WARNING WARNING WARNING
# this test may fail anytime, due to external references
# TODO replace it with something less puny
# WARNING WARNING WARNING
#
#SUCCESS
#
# RESULT 19: modification will pass


# CASE 20: Update fails because the decomposition range is invalid
#
# update domain object
#
#FAILURE
#
# RESULT 20: update will fail

# CASE 21 removed


# CASE 22: Creation passes with correct auth from 0/0 mnt-domains
# domain is in capitals
#
# create domain object
#
#SUCCESS
#
# RESULT 22: creation will pass


# CASE 023: Try to create domain object with dnssec errors
#
# create domain object
#
#FAILURE
#
# RESULT 023: creation will fail


# CASE 024: 
#
# create 1.e164.arpa domain object
#
#FAILURE
#
# RESULT 024: creation will fail because there is no parent object


# CASE 024: 
#
# create 1.e164.arpa domain object
#
#FAILURE
#
# RESULT 024: creation will fail because there is no parent object

# CASE 025: 
#
# create 1.e164.arpa domain object
#
#SUCCESS
#
# RESULT 025: creation will succeed

# CASE 026: 
#
# create 1.1.e164.arpa domain object
# 1.e164.arpa exists
#
#FAILURE
#
# RESULT 026: creation will fail

# CASE 027: 
#
# create 1.e164.arpa domain object
# checking various syntax 
#
#SUCCESS
#
# RESULT 027: creation will succeed

# CASE 028: 
#
# create e164.arpa domain object
#
#SUCCESS
#
# RESULT 028: creation will succeed

# CASE 029: 
#
# update e164.arpa domain object
#
#SUCCESS
#
# RESULT 029: modification will succeed

# CASE 030: 
#
# update 1.e164.arpa domain object
#
#SUCCESS
#
# RESULT 030: modification will succeed

# CASE 031: 
#
# delete 1.e164.arpa domain object
#
#SUCCESS
#
# RESULT 031: deleiton will succeed

# CASE 032: 
#
# create 1.e164.arpa domain object
# to check the bugfix for names line 111in-addr.arpa or 111e164.arpa (suffix not matched correctly).
#
#FAILURE
#
# RESULT 032: creation will fail

# CASE 033:
#
# create 1.e164.arpa domain object
# must fail with rdns errors - no override
#
#FAILURE
#
# RESULT 033: creation will fail

# CASE 034: 
#
# create domain object
# DS=1
#
#FAILURE
#
# RESULT 034: creation will fail but no "DS rejected" message

# CASE 035: 
#
# create 1.e164.arpa domain object
# make sure we CAN submit DS record in e164.arpa related object.

#
#FAILURE
#
# RESULT 035: creation will succeed

# CASE 036: 
#
# modify 1.e164.arpa domain object
# must fail with rdns errors - no override
#
#FAILURE
#
# RESULT 036: modify will fail
#
# CASE 037:
#
# create 1.e164.arpa domain object
# checking various syntax
#
#FAILURE
#
# RESULT 037: creation will fail
# CASE 38: create /12 domain object
# inet6num exists and authorised
# make sure rDNS checks took place
#
# create domain object
#
#SUCCESS
#
# RESULT 38: creation will pass
# CASE 39: Create succeeds - testing decomposition on /24 level.
# override used to skip dns checks
#
# create domain objects
#
#SUCCESS
#
# RESULT 39: creation will succeed


# CASE 40: create /16
# inet6num exists and authorised
# make sure rDNS checks took place 
#
# create domain object
#
#SUCCESS
#
# RESULT 40: creation will pass
# CASE 41: create /20 domain object
# inet6num exists and authorised
# make sure rDNS checks took place 
#
# create domain object
#
#SUCCESS
#
# RESULT 41: creation will pass
# CASE 42: create /24 domain object
# inet6num exists and authorised
# make sure rDNS checks took place 
#
# create domain object
#
#SUCCESS
#
# RESULT 42: creation will pass
# CASE 43: create /28 domain object
# inet6num exists and authorised
# make sure rDNS checks took place 
#
# create domain object
#
#SUCCESS
#
# RESULT 43: creation will pass
# CASE 44: create /32 domain object
# inet6num exists and authorised
# make sure rDNS checks took place 
#
# create domain object
#
#SUCCESS
#
# RESULT 44: creation will pass
# CASE 45: create /48 domain object
# inet6num exists and authorised
# make sure rDNS checks took place 
#
# create domain object
#
#SUCCESS
#
# RESULT 45: creation will pass
# CASE 46: create /64 domain object
# inet6num exists and authorised
# make sure rDNS checks took place 
#
# create domain object
#
#SUCCESS
#
# RESULT 46: creation will pass
# CASE 47: Create /8 domain object ipv4
# override used to pass dns checks
#
# create domain objects
#
#SUCCESS
#
# RESULT 47: creation will succeed
# CASE 48: Create /16 domain object ipv4
# override used to pass dns checks
#
# create domain objects
#
#SUCCESS
#
# RESULT 48: creation will succeed
# CASE 49: Create /24 domain object ipv4
# override used to pass dns checks
#
# create domain objects
#
#SUCCESS
#
# RESULT 49: creation will succeed
# CASE 50: Create /32 domain object ipv4
# no override
#
# create domain objects
#
#FAILURE
#
# RESULT 50: creation will fail
# CASE 51: create /128 domain object
# inet6num exists and authorised
# no override
#
# create domain object
#
#FAILURE
#
# RESULT 51: creation will fail
# CASE 52: create /44 domain object
# inet6num exists and authorised
# no override
#
# create domain object
#
#FAILURE
#
# RESULT 51: creation will fail
# CASE 53: create /68 domain object
# inet6num exists and authorised
# no override
#
# create domain object
#
#FAILURE
#
# RESULT 53: creation will fail
# CASE 54: create /8 domain object ipv6
# inet6num exists and authorised
# no override
#
# create domain object
#
#FAILURE
#
# RESULT 54: creation will fail
# CASE 55: Create classless ipv4, with a '-' (classless delegation)
# no override
#
# create domain objects
#
#FAILURE
#
# RESULT 55: creation will fail
# CASE 056: 
#
# create 1.e164.arpa domain object
# making sure we don't accept glue records in ip6.arpa/in-addr.arpa
#
#FAILURE
#
# RESULT 056: creation will fail
#
# CASE 057: 
#
# create 1.e164.arpa domain object
# make sure we CAN submit DS record in e164.arpa related object.
# update itself will fail because dnssec setup is wrong, but should be no 'no ds accepted' message.
#
#FAILURE
#
# RESULT 057: creation will fail


# CASE 064: Try to create a domain object when more specific object exists
#
# create domain object
#
#FAILURE
#
# RESULT 64: creation will fail

